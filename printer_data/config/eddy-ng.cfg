# For Eddy USB/Duo, include the mcu and temperature sensor sections.
# Omit for Eddy Coil
[mcu eddy]
# Or whatever is appropriate for CAN
#serial: /dev/serial/by-id/usb-Klipper_rp2040_504450610845941C-if00
#serial: /dev/serial/by-id/usb-Klipper_rp2040_45474E621A82BA6A-if00
#restart_method: command
canbus_uuid: 4f5ebaf1e3aa


[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 100



[temperature_sensor btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26

# For all Eddy (USB/Duo/Coil)
[probe_eddy_ng btt_eddy]
sensor_type: ldc1612
# Eddy USB/Duo values below. For Eddy Coil, replace these two with mcu/bus for your setup.
i2c_mcu: eddy
i2c_bus: i2c0f
x_offset: 0 # INSERT VALUE FOR YOUR PROBE POSITION
y_offset: -10 # INSERT VALUE FOR YOUR PROBE POSITION 
#reg_drive_current: 15
#tap_drive_current: 16
tap_adjust_z: -0.350
tap_target_z: -3.0
#tap_threshold: 555
tap_max_samples: 10

#[safe_z_home]
#home_xy_position: 175, 175 # Choose an X,Y position that is in the center of your bed. For a 300x300 machine that will be 150, 150. Use the same principle to calculate your bed center.
#z_hop: 3
#z_hop_speed: 30
#speed: 250

[homing_override]
gcode:
 #Move 5 up, just in case (this is our safety zhop, this needs 'set_position_z: 0' below)
  G91 ; set relative positioning
  G0 Z10 F1000 ; 5 up zhop
  {% if not rawparams or 'Y' in rawparams %}
    {action_respond_info('Homing Y')}
    G28 Y
    G90 ; set absolute positioning
    G0 Y175 F6000 ; return to center
    M400 ; Wait for move to finish
  {% endif %}
  {% if not rawparams or 'X' in rawparams %}
    {action_respond_info('Homing X')}
    G28 X
    G90 ; set absolute positioning
    G0 X175 F6000 ; return to center
    M400 ; Wait for move to finish
    G4 S3
  {% endif %}
  {% if not rawparams or 'Z' in rawparams %}
    {action_respond_info('Homing Z')}
    G90 ; set absolute positioning
    G0 X177.5 Y177.5 F6000 ; return to center, please add your offsets manually if you want to
    G28 Z
    G90                        ; set absolute positioning
    G0 Z2 F1000                ; to 2mm -- home height, for maximum sensor accuracy
    G4 S1                      ; chill for a sec
    M400                       ; wait for move to finish
    PROBE_EDDY_NG_PROBE_STATIC # Eddy needs a manual PROBE before calling the 'SET_Z_FROM_PROBE' 
    PROBE_EDDY_NG_PROBE_STATIC HOME_Z=1
    G0 Z5 F1000 ; 5mm up
    M400 ; Wait for move to finish
  {% endif %}
axes: xyz
set_position_z: 0 
    
[bed_mesh]
horizontal_move_z: 4
speed: 350
# For the mesh dimensions below, the coordinates need to be reachable by the center of the probe. To calculate coordinates that will work, use the formula below:
# mesh x min = position_min_x + greater_of (15mm or x_offset) <--- in this term, only consider the x offset if it is positive, ignore if negative.
# mesh y min = position_min_y + greater_of (15mm or y_offset) <--- in this term, only consider the y offset if it is positive, ignore if negative.
# mesh x max = position_max_x - greater_of (15mm or |x_offset|) <--- in this term, only consider the x offset if it is negative, ignore if positive.
# mesh y max = position_max_y - greater_of (15mm or |y_offset|) <--- in this term, only consider the y offset if it is negative, ignore if positive.
# Example: Consider that you have a 300 x 300 bed with the max x and y positions being 300 and the min being 0. Your probe offsets are -20 for X and 10 for Y
# For mesh x min we ignore the x offset term because it is negative. Therefore mesh x min = 15
# For mesh y min we do not ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y min = 15
# For mesh x max we do not ignore the x offset term because it is negative. It is also greater than 15. Therefore mesh x max = 280
# For mesh y max we ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y max = 285
# The final result would be mesh_min: 15, 15 mesh_max: 280, 285
mesh_min: 30, 0  # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
mesh_max: 350, 312 # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
probe_count: 9, 9
algorithm: bicubic
#fade_start: 1
#fade_end: 10
#fade_target: 0
#adaptive_margin: 5
#scan_overshoot: 8  #uncomment this section if you still have room left over on the X axis for some scan overshoot to product smoother movements and more accurate scanning. Uncommenting this should be fine if you are using a standard voron mount.